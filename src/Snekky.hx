import hxargs.Args;
import haxe.io.Bytes;
import haxe.io.Path;
import vm.VirtualMachine;
import compiler.Compiler;
import parser.Parser;
import lexer.Lexer;

@:expose
class Snekky {

    public static final Version = "0.9.0";

    public static function tokenizeString(filename:String, code:String) {
        return new Lexer(filename, code);
    }

    public static function compileString(filename:String, code:String, debug:Bool, compress:Bool, warnings:Bool):Bytes {
        final lexer = new Lexer(filename, code);

        final parser = new Parser(lexer, false);
        parser.generateAst();

        final compiler = new Compiler(debug, warnings);
        compiler.compile(parser.ast);
        final byteCode = compiler.getByteCode(compress);  

        return byteCode;
    }

    public static function evaluateBytes(byteCode:Bytes) {
        final vm = new VirtualMachine(byteCode);
        vm.eval();
    }
    
    public static function main() {
        #if target.sys
        final args = Sys.args();
        final config = {
            debug: true,
            compress: true,
            inputPath: null,
            dumpPath: null,
            showHelp: false,
            warnings: true
        };
        
        final argumentHandler = Args.generate([
            @doc("Print this message")
            ["--help", "-h"] => function() {
                config.showHelp = true;
            },
            @doc("Print version info and exit")
            ["--version", "-v"] => function() {
                Console.println(Version);
                Sys.exit(0);
            },
            @doc("Specify where to place the generated bytecode")
            ["--output", "-o"] => function(path:String) {
                config.dumpPath = path;
            },
            @doc("Compile without debug information")
            ["--no-debug"] => function() {
                config.debug = false;
            },
            @doc("Do not compress the generated bytecode")
            ["--no-compress"] => function() {
                config.compress = false;
            },
            @doc("Suppress all compiler warnings")
            ["--no-warnings"] => function() {
                config.warnings = false;
            },
            _ => function(input:String) {
                config.inputPath = input;
            }
        ]);

        argumentHandler.parse(args);

        if (config.showHelp) {
            Console.println("Usage: snekky [-options] <input>");
            Console.println("");
            Console.println("Options:");
            Console.println(argumentHandler.getDoc());
            Sys.exit(0);
        }

        if (args.length == 0) {
            final repl = new repl.Repl();
            repl.start();
        } else {
            final filename = config.inputPath;
            final compress = config.dumpPath != null && config.compress;
    
            if (Path.extension(filename) == "snek") {
                final code = sys.io.File.getContent('./$filename');
    
                final byteCode = compileString(filename, code, config.debug, compress, config.warnings);
    
                if (config.dumpPath != null) {
                    sys.io.File.saveBytes('${config.dumpPath}.bite', byteCode);
                    Sys.exit(0);
                }
    
                evaluateBytes(byteCode);
            } else {
                final byteCode = sys.io.File.getBytes('./$filename');
                evaluateBytes(byteCode);
            }
        }
        #end
    }
}
