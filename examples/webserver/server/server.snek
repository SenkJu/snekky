import "server/message/status";
import "server/mime/mime";
import "server/util";
import "server/message/encoder";
import "server/message/request";
import "server/message/response";
import "server/logger";

let Server = func() {

    let socket = Net.Socket(false);
    let routes = {
        GET: {}
    };
    mut staticPath = null;

    let get = func(route, cb) {
        routes.GET[route] = cb;
    };

    let serveStatic = func(path) {
        staticPath = path;
    };

    let readMessage = func(client) {
        let lines = [];
        while true {
            let line = client.readLine();

            if line == null {
                return null;
            }

            if line.length() == 0 {
                break;
            }

            lines.push(line);
        }

        return lines;
    };

    let listen = func(host, port, cb) {
        socket.bind(host, port);
        socket.listen(1337);
        cb();

        while true {
            let client = socket.accept();
            let message = readMessage(client);
            if message == null {
                continue;
            }
            let parsedRequest = Encoder.decode(message);
            let method = parsedRequest.method;
            Logger.log(method >< ": " >< parsedRequest.path);

            let res = Response(client);
            when {
                routes[method][parsedRequest.path] != null => {
                    let req = Request(parsedRequest);
                    routes[method][parsedRequest.path](req, res);   
                }
                staticPath != null && File.exists(Util.sanitizePath(staticPath >< parsedRequest.path)) => {
                    let content = File.readBytes(Util.sanitizePath(staticPath >< parsedRequest.path));
                    let ext = parsedRequest.path.split(".").pop();
                    res.setHeader("Content-Type", Mime.resolveMime(ext));
                    res.send(content);
                }
                else => {
                    res.setStatus(Status.NotFound);
                    res.send(Status.NotFound);      
                }
            }

            client.close();
        }
    };

    return {
        listen: listen,
        get: get,
        serveStatic: serveStatic
    };
};