let ExpressionParser = func(lexer, parser) {
    mut factor = null;
    mut numeric = null;
    mut comparison = null;

    factor = func() {
        let currentToken = parser.currentToken();

        return when currentToken.type {
            TokenType.LParen => {
                parser.nextToken();
                let comp = comparison();
                parser.nextToken();

                comp  
            }
            TokenType.Ident => {
                let ident = IdentNode(currentToken.literal);
                parser.nextToken();

                ident
            }
            TokenType.String => {
                let string = StringNode(currentToken.literal);
                parser.nextToken();

                string                
            }
            else => {
                let number = NumberNode(Number.parse(currentToken.literal));
                parser.nextToken();

                number               
            }
        };
    };

    numeric = func() {
        mut left = factor();

        while true {
            let type = when parser.currentToken().type {
                TokenType.Plus => NodeType.Add
                TokenType.Subtract => NodeType.Subtract
                else => {
                    return left;
                }
            };

            parser.nextToken();
            let right = factor();
            left = OperatorNode(type, left, right);
        }

        return left;
    };

    comparison = func() {
        let left = numeric();

        let type = when parser.currentToken().type {
            TokenType.LessThan => NodeType.LessThan
            TokenType.GreaterThan => NodeType.GreaterThan
            TokenType.Equals => NodeType.Equals
            else => {
                return left;
            }
        };

        parser.nextToken();
        let right = numeric();
        return OperatorNode(type, left, right);
    };

    let parseExpression = func() {
        return ExpressionNode(comparison());
    };

    return {
        parseExpression: parseExpression
    };
};