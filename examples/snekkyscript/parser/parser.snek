import "ast/node";
import "parser/expression_parser";

let Parser = func(lexer) {

    mut currentToken = lexer.readToken();
    mut ast = BlockNode(null);
    mut expressionParser = null;
    mut parseToken = null;

    let nextToken = func() {
        currentToken = lexer.readToken();
    };

    let expectToken = func(type) {
        if (currentToken.type != type) {
            Sys.println("Unexpected token `" >< currentToken.literal >< "`");
            Sys.exit(0);
        }
    };

    let parseCall = func(target) {
        nextToken();

        let arguments = [];

        while currentToken.type != TokenType.RParen {
            arguments.push(expressionParser.parseExpression());
            if currentToken.type == TokenType.Comma && lexer.peekToken().type == TokenType.RParen {
                expectToken(TokenType.RParen);
            } else if currentToken.type == TokenType.Comma {
                nextToken();
            } else {
                expectToken(TokenType.RParen);
            }
        }

        nextToken();

        return CallNode(target, arguments);
    };

    let parseVariable = func() {
        let name = currentToken.literal;
        nextToken();
        expectToken(TokenType.Assign);
        nextToken();
        let value = expressionParser.parseExpression();
        expectToken(TokenType.Semicolon);
        nextToken();

        return VariableNode(name, value);
    };

    let parseIf = func(block) {
        nextToken();
        let condition = expressionParser.parseExpression();
        expectToken(TokenType.LBrace);
        nextToken();
        let consequence = BlockNode(block);
        while currentToken.type != TokenType.RBrace && currentToken.type != TokenType.Eof {
            parseToken(consequence);   
        }
        expectToken(TokenType.RBrace);
        
        let alternative = if lexer.peekToken().type == TokenType.Else {
            nextToken();
            nextToken();
            expectToken(TokenType.LBrace);
            nextToken();
            let alt = BlockNode(block);
            while currentToken.type != TokenType.RBrace && currentToken.type != TokenType.Eof {
                parseToken(alt);   
            }
            expectToken(TokenType.RBrace);

            alt
        } else {
            null
        };

        nextToken();

        return IfNode(condition, consequence, alternative);
    };

    let parseWhile = func(block) {
        nextToken();
        let condition = expressionParser.parseExpression();
        expectToken(TokenType.LBrace);
        nextToken();
        let body = BlockNode(block);
        while currentToken.type != TokenType.RBrace && currentToken.type != TokenType.Eof {
            parseToken(body);   
        }
        expectToken(TokenType.RBrace);
        nextToken();

        return WhileNode(condition, body);
    };

    parseToken = func(block) {
        let node = when currentToken.type {
            TokenType.Ident => if lexer.peekToken().type == TokenType.Assign {
                parseVariable()
            } else {
                let expr = expressionParser.parseExpression();
                nextToken();
                expr
            }
            TokenType.If => parseIf(block)
            TokenType.While => parseWhile(block)
            TokenType.Illegal => {
                Sys.println("Illegal token `" >< currentToken.literal >< "`");
                Sys.exit(0);
                null
            }
            else => {
                let expr = expressionParser.parseExpression();
                nextToken();
                expectToken(TokenType.Semicolon);
                expr
            }
        };

        block.addNode(node);
    };

    let generateAst = func() {
        while currentToken.type != TokenType.Eof {
            parseToken(ast);
        }
    };

    let parser = {
        currentToken: func() {
            return currentToken;
        },
        parseCall: parseCall,
        nextToken: nextToken,
        generateAst: generateAst,
        ast: ast
    };

    expressionParser = ExpressionParser(lexer, parser);

    return parser;
};