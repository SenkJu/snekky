// A simple virtual machine with only three instructions.

let ins = {
    // Pushes `value` onto the stack.
    Push: func(value) {
        return {
            name: "push",
            value: value
        };
    },
    // Pops two values from the stack, adds them and pushes result back onto the stack.
    Add: func() {
        return {
            name: "add"
        };
    },
    // Pops two values from the stack, substracts one from the other and pushes reult back onto the stack.
    Sub: func() {
        return {
            name: "sub"
        };
    }
};

let Stack = func() {

    let stack = [];
    mut stackPointer = 0;

    let push = func(value) {
        stack[stackPointer] = value;
        stackPointer = stackPointer + 1;
    };

    let pop = func() {
        stackPointer = stackPointer - 1;
        let value = stack[stackPointer];
        return value;
    };

    return {
        push: push,
        pop: pop,
        values: stack
    };
};

let eval = func(code) {
    let stack = Stack();
    mut i = 0;

    while i < code.length() {
        let instruction = code[i];

        if (instruction.name == "push") {
            stack.push(instruction.value);
        } else if (instruction.name == "add") {
            let right = stack.pop();
            let left = stack.pop();

            stack.push(left + right);
        } else if (instruction.name == "sub") {
            let right = stack.pop();
            let left = stack.pop();

            stack.push(left - right);
        }

        i += 1;
    }

    Sys.println(stack.values[0]);
};


// Evaluates to `3`.
let code = [
    ins.Push(2),
    ins.Push(3),
    ins.Add(),
    ins.Push(2),
    ins.Sub()
];

eval(code);